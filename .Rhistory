print("oh Mate!")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
summary(cars)
plot(pressure)
library(gapminder)
gapminder
library(ggplot2)
p <- ggplot(data= gapminder, mapping = aes(x=gdpPercap,
y=lifeExp))
p + geom_point()
p + geom_smooth()
library(scales)
p + geom_point(mapping = aes(colour=log(pop))) +
scale_x_log10(labels=scales::dollar)+
facet_wrap(~continent, ncol = 5)
install.packages("scales")
install.packages("scales")
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
gapminder
library(ggplot2)
p <- ggplot(data= gapminder, mapping = aes(x=gdpPercap,
y=lifeExp))
p + geom_point()
p + geom_smooth()
library(scales)
p + geom_point(mapping = aes(colour=log(pop))) +
scale_x_log10(labels=scales::dollar)+
facet_wrap(~continent, ncol = 5)
install.packages("scales")
install.packages("scales")
library(gapminder)
gapminder
library(ggplot2)
p <- ggplot(data= gapminder, mapping = aes(x=gdpPercap,
y=lifeExp))
p + geom_point()
p + geom_smooth()
library(scales)
p + geom_point(mapping = aes(colour=log(pop))) +
scale_x_log10(labels=scales::dollar)+
facet_wrap(~continent, ncol = 5)
install.packages("scales")
library(gapminder)
gapminder
library(ggplot2)
p <- ggplot(data= gapminder, mapping = aes(x=gdpPercap,
y=lifeExp))
p + geom_point()
p + geom_smooth()
library(scales)
p + geom_point(mapping = aes(colour=log(pop))) +
scale_x_log10(labels=scales::dollar)+
facet_wrap(~continent, ncol = 5)
library(readxl)
UNPD_WCU2018_Country_Data_Survey_Based <- read_excel("Desktop/slar/UNPD_WCU2018_Country_Data_Survey-Based.xlsx",
sheet = "DATA", col_names = FALSE)
View(UNPD_WCU2018_Country_Data_Survey_Based)
bc <- UNPD_WCU2018_Country_Data_Survey_Based[-r(1,2,3)]
bc <- UNPD_WCU2018_Country_Data_Survey_Based[-c(1,2,3)]
View(bc)
bc <- UNPD_WCU2018_Country_Data_Survey_Based[-c(1,2,3),,drop=F]
View(bc)
View(bc)
View(bc)
View(bc)
View(bc)
save (bc)
save ( "bc")
save ('bc')
View(bc)
View(bc)
write.table(bc, "c:/mydata.txt", sep="\t")
write.table(mydata, "bc.txt", sep="\t")
write.table(bc, "bc.txt", sep="\t")
bcn <- read.delim("bcn.txt")
bcn <- read.delim(file.choose())
view(bcn)
View(bcn)
library(MASS)
library(ISLR)
install.packages("ISLR")
Boston
fix(Boston)
names(Boston)
lm.fit =lm(medv~lstat)
lm.fit =lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
p <- ggplot(data=Boston,
mapping = aes(x=medv,
y=lstat))
p + geom_point()+geom_smooth()
library(ggplot2)
p <- ggplot(data=Boston,
mapping = aes(x=medv,
y=lstat))
p + geom_point()+geom_smooth()
coef(lm.fit)
lm.fit
confint(lm.fit)
> abline (lm.fit)
plot(lstat ,medv)
abline (lm.fit)
plot(lstat ,medv)
attach(Boston)
abline (lm.fit)
plot(lstat ,medv)
abline (lm.fit)
abline (lm.fit, lwd=3)
abline (lm.fit ,lwd =3, col ="red ")
abline (lm.fit ,lwd =20, col ="red ")
abline (lm.fit ,lwd =200, col ="red ")
abline (lm.fit ,lwd =2000, col ="red ")
abline (lm.fit ,lwd =2, col ="red ")
abline (lm.fit ,lwd =2, col ="red ")
abline (lm.fit ,lwd =2, col ="red ")
abline (lm.fit ,lwd=3, col ="red")
abline (lm.fit ,lwd=3, col ="red")
abline (lm.fit, lwd=3)
(lstat ,medv)
plot(lstat ,medv)
abline (lm.fit, lwd=3)
abline (lm.fit ,lwd=3, col ="red")
plot(lstat ,medv ,pch =20)
plot(lstat ,medv ,pch ="+")
plot(lstat ,medv ,pch ="00")
plot(lstat ,medv ,pch ="<)")
plot(lstat ,medv ,pch =":)")
plot(lstat ,medv ,pch ="*")
plot (1:20 ,1:20, pch =1:20)
par(mfrow =c(2,2))
plot(lm.fit)
par(mfrow=c(2,1))
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
par(mfrow=c(1,2))
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
par(mfrow=c(2,1))
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
plot(hatvalues (lm.fit ))
which.max (hatvalues (lm.fit))
devtools::install_github('charlie86/spotifyr')
install_github('charlie86/spotifyr')
install.packages('spotifyr')
library('spotifyr')
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
lm.fit =lm(medv~lstat, data=Boston)
library(ggplot2)
p <- ggplot(data=Boston,
mapping = aes(x=medv,
y=lstat))
p + geom_point()+geom_smooth()
plot(lstat ,medv)
plot(lstat ,medv)
attach(Boston)
abline (lm.fit, lwd=3)
abline (lm.fit ,lwd=3, col ="red")
plot(lstat ,medv)
plot(lstat ,medv)
abline (lm.fit, lwd=3)
abline (lm.fit ,lwd=3, col ="red")
plot(lstat ,medv ,pch =20)
plot(lstat ,medv ,pch ="*")
plot (1:20 ,1:20, pch =1:20)
plot(lstat ,medv ,pch ="*")
plot(lstat ,medv ,pch =20)
abline (lm.fit ,lwd=3, col ="red")
abline (lm.fit, lwd=3)
par(mfrow=c(2,1))
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
pairs(Boston)
summary(lm.fit)
par(mfrow=c(2,1))
plot(predict (lm.fit), residuals (lm.fit))
plot(predict (lm.fit), rstudent (lm.fit))
plot(hatvalues (lm.fit ))
which.max (hatvalues (lm.fit))
lm.fit=lm(medv∼lstat+age ,data=Boston )
lm.fit=lm(medv∼lstat+age ,data=Boston)
lm.fit=lm(medv~lstat+age ,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~. ,data = Boston)
summary(lm.fit)
?summary.lm
summary(lm.fit)$r.sq
summary(lm.fit)$adj.r.sq
summary(lm.fit)$sigma
lm.fit1=lm(medv∼.-age ,data=Boston )
lm.fit1=lm(medv~.-age ,data=Boston )
summary(lm.fit)$sigma
summary(lm.fit1)$sigma
lm.fitint=lm(medv~lstat*age, data = Boston)
summary(lm.fitint)
summary(lm.fitint)$sigma
summary(lm.fitint)$r.sq
summary(lm.fit1)$r.sq
summary(lm.fit)$r.sq
summary(lm.fit)$r.sq
library(MASS)
library(ISLR)
install.packages("ISLR")
Boston
fix(Boston)
names(Boston)
lm.fit =lm(medv~lstat, data=Boston)
install.packages("ISLR")
library(MASS)
library(ISLR)
install.packages("ISLR")
Boston
fix(Boston)
names(Boston)
lm.fit =lm(medv~lstat, data=Boston)
summary(lm.fit)
library(ggplot2)
p <- ggplot(data=Boston,
mapping = aes(x=medv,
y=lstat))
p + geom_point()+geom_smooth()
install(bdynsys)
install.packages(bdynsys)
install(bdynsys)
install.packages("bdynsys")
install.packages("twitteR")
wd
install.packages('sf')
library(sf)
library(ggplot2)
st_read("/Users/nathankhadaroo/Desktop/Pydatavz/gm_lsoa_shp_files/gm_lsoa_2011.shp")
library(sf)
library(sf)
install.packages('sf', dependencies = TRUE)
library(sf)
install.packages('sf')
library(sf)
library(dbplyr)
install.packages("dbplyr")
install.packages('sf')
library(sf)
library(dbplyr)
install.packages("dbplyr")
install.packages("dbplyr")
library(sf)
R --version
r --version
library(sf)
R.version
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(here)
library(tidyverse)
library(ggrepel)
library(socviz)
install.packages(ggthemes)
install.packages(ggthemes)
## By defult, show code for all chunks in the knitted document,
## as well as the output. To override for a particular chunk
## use echo = FALSE in its options.
knitr::opts_chunk$set(echo = TRUE)
## Set the default size of figures
knitr::opts_chunk$set(fig.width=8, fig.height=5)
## Load the libraries we will be using
library(gapminder)
library(here)
library(socviz)
library(tidyverse)
## This code will not be evaluated automatically.
## (Notice the eval = FALSE declaration in the options section of the
## code chunk)
my_packages <- c("tidyverse", "broom", "coefplot", "cowplot",
"gapminder", "GGally", "ggrepel", "ggridges", "gridExtra",
"here", "interplot", "margins", "maps", "mapproj",
"mapdata", "MASS", "quantreg", "rlang", "scales",
"survey", "srvyr", "viridis", "viridisLite", "devtools")
install.packages(my_packages, repos = "http://cran.rstudio.com")
install.packages(my_packages, repos = "http://cran.rstudio.com")
ggplot(data = lol,
aes(x = lol$age,
y = lol$predscore, group = hid, colour = as.factor(region)))+
geom_point(size     = 1,
alpha    = .8)+
geom_line()+
labs(title    = "Predicted scorelines from the random slopes model",
col      = "Region") +
xlab("Age - 16") +
ylab("Predscore")+
theme(axis.line.x =element_line(colour="black", size=.5))+
theme(axis.line.y =element_line(colour="black", size=.5))+
theme(axis.title.y=element_text(size=17,colour="#535353",face="bold",vjust=1.5)) +
theme(axis.title.x=element_text(size=17,colour="#535353",face="bold",vjust=-.5)) +
ggtitle("Predicted scorelines from the random slopes model")+
theme(plot.title=element_text(face="bold",colour="black",size=20))
library(tidyverse)
ggplot(data = lol,
aes(x = lol$age,
y = lol$predscore, group = hid, colour = as.factor(region)))+
geom_point(size     = 1,
alpha    = .8)+
geom_line()+
labs(title    = "Predicted scorelines from the random slopes model",
col      = "Region") +
xlab("Age - 16") +
ylab("Predscore")+
theme(axis.line.x =element_line(colour="black", size=.5))+
theme(axis.line.y =element_line(colour="black", size=.5))+
theme(axis.title.y=element_text(size=17,colour="#535353",face="bold",vjust=1.5)) +
theme(axis.title.x=element_text(size=17,colour="#535353",face="bold",vjust=-.5)) +
ggtitle("Predicted scorelines from the random slopes model")+
theme(plot.title=element_text(face="bold",colour="black",size=20))
lol <- datapred[datapred$multiplecohorts == 1, ]
lol <- lol[!(lol$hid == 729 & lol$age == 2),]
ggplot(data = lol,
aes(x = lol$age,
y = lol$predscore, group = hid, colour = as.factor(region)))+
geom_point(size     = 1,
alpha    = .8)+
geom_line()+
labs(title    = "Predicted scorelines from the random slopes model",
col      = "Region") +
xlab("Age - 16") +
ylab("Predscore")+
theme(axis.line.x =element_line(colour="black", size=.5))+
theme(axis.line.y =element_line(colour="black", size=.5))+
theme(axis.title.y=element_text(size=17,colour="#535353",face="bold",vjust=1.5)) +
theme(axis.title.x=element_text(size=17,colour="#535353",face="bold",vjust=-.5)) +
ggtitle("Predicted scorelines from the random slopes model")+
theme(plot.title=element_text(face="bold",colour="black",size=20))
#loading data
setwd("~/Desktop/Multilevel-Modelling")
mydataNAs <- read.table(file = "coursework.txt", sep = "," , header = TRUE)
mydata <- drop_na(mydataNAs)
mydata <- dummy_cols(mydata, select_columns = c('hhtenure', 'hiqual3'), remove_first_dummy = TRUE)
mydata <- mydata %>% rename(rent_local_auth = hhtenure_2, rent_private = hhtenure_3,
school_qual = hiqual3_2, no_qual = hiqual3_3)
mydata <- mydata %>% mutate(age = age - 16)
rsmodelhid <- lmer(nhood_mistrust ~ age + sclfsato + urban + school_qual + no_qual + rent_local_auth + rent_private + ( 1+ age |hid) + (1 |region), data = mydata, REML = FALSE, control = lmerControl(check.nobs.vs.nRE = "ignore"))
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(tidyverse)
library(fastDummies)
library(broom)
library(lme4)
library(magrittr)
library(htmlTable)
library(RColorBrewer)
#loading data
setwd("~/Desktop/Multilevel-Modelling")
mydataNAs <- read.table(file = "coursework.txt", sep = "," , header = TRUE)
mydata <- drop_na(mydataNAs)
mydata <- dummy_cols(mydata, select_columns = c('hhtenure', 'hiqual3'), remove_first_dummy = TRUE)
mydata <- mydata %>% rename(rent_local_auth = hhtenure_2, rent_private = hhtenure_3,
school_qual = hiqual3_2, no_qual = hiqual3_3)
colnames(mydata)
mydata <- mydata %>% mutate(age = age - 16)
rsmodelhid <- lmer(nhood_mistrust ~ age + sclfsato + urban + school_qual + no_qual + rent_local_auth + rent_private + ( 1+ age |hid) + (1 |region), data = mydata, REML = FALSE, control = lmerControl(check.nobs.vs.nRE = "ignore"))
predscore <- fitted(rsmodelhid)
datapred <- cbind(predscore = predscore, age = mydata$age, hid = mydata$hid, region = mydata)
datapred <- data.frame(unique(datapred))
datapred <- datapred[order(datapred$hid, datapred$age), ]
datapred$multiplecohorts <- rep(0, dim(datapred)[1])
datapred$multiplecohorts[datapred$hid %in% unique(datapred$hid[duplicated(datapred$hid)])] <- 1
lol <- datapred[datapred$multiplecohorts == 1, ]
lol <- lol[!(lol$hid == 729 & lol$age == 2),]
ggplot(data = lol,
aes(x = lol$age,
y = lol$predscore, group = hid, colour = as.factor(region)))+
geom_point(size     = 1,
alpha    = .8)+
geom_line()+
labs(title    = "Predicted scorelines from the random slopes model",
col      = "Region") +
xlab("Age - 16") +
ylab("Predscore")+
theme(axis.line.x =element_line(colour="black", size=.5))+
theme(axis.line.y =element_line(colour="black", size=.5))+
theme(axis.title.y=element_text(size=17,colour="#535353",face="bold",vjust=1.5)) +
theme(axis.title.x=element_text(size=17,colour="#535353",face="bold",vjust=-.5)) +
ggtitle("Predicted scorelines from the random slopes model")+
theme(plot.title=element_text(face="bold",colour="black",size=20))
View(lol)
View(lol)
ggplot(data = lol,
aes(x = lol$age,
y = lol$predscore, group = hid, colour = as.factor(region.region)))+
geom_point(size     = 1,
alpha    = .8)+
geom_line()+
labs(title    = "Predicted scorelines from the random slopes model",
col      = "Region") +
xlab("Age - 16") +
ylab("Predscore")+
theme(axis.line.x =element_line(colour="black", size=.5))+
theme(axis.line.y =element_line(colour="black", size=.5))+
theme(axis.title.y=element_text(size=17,colour="#535353",face="bold",vjust=1.5)) +
theme(axis.title.x=element_text(size=17,colour="#535353",face="bold",vjust=-.5)) +
ggtitle("Predicted scorelines from the random slopes model")+
theme(plot.title=element_text(face="bold",colour="black",size=20))
library(tidyverse)
#loading data
ggplot(mpg)
mpg
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
mpg
col(mpg)
dim(mpg)
summary(mpg)
?mpg
ggplot(data = mpg)+
geom_point(mapping = aes(hwy, cyl))
ggplot(data = mpg)+
geom_point(mapping = aes(class, drv))
?mpg
ggplot(data = mpg)+
geom_point(mapping = aes(class, drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
geom_point(mapping = aes(x = displ, y = hwy, color = "blue")
ggplot(data = mpg) +
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
mpg?
?mpg
?mpg
lapply(c("tidyverse",
"fivethirtyeight",
"gapminder",
"ggrepel",
"gganimate",
"ggridges",
"ggthemes",
"coefplot",
"jsonlite",
"statnet",
"igraph",
"tm",
"tidytext",
"readtext",
"rvest",
"stringr",
"devtools",
"wordcloud",
"proxy",
"fpc",
"cluster",
"janeaustenr",
"gutenbergr",
"ggraph",
"syuzhet",
"plotly",
"caret",
"ggplot2",
"mlbench",
"class",
"caTools",
"randomForest",
"ranger",
"kernlab",
"class",
"glmnet",
"naivebayes",
"rpart",
"rpart.plot"),library, character.only=TRUE)
